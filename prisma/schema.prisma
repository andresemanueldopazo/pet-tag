datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Tag {
  id       Int     @id @default(autoincrement())
  code     String  @unique
  password String  @unique
  pet      Pet?
}

model Phone {
  id       Int     @id @default(autoincrement())
  number   String
  public   Boolean @default(true)
  parent   Parent  @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId Int     @unique
}

model Email {
  id       Int     @id @default(autoincrement())
  address  String
  public   Boolean @default(true)
  parent   Parent  @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId Int     @unique
}

model Address {
  id         Int    @id @default(autoincrement())
  street     String
  apartament String
  city       String
  state      String
  country    String
  zipCode    Int
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String @unique
}

model Parent {
  id          Int     @id @default(autoincrement())
  name        String
  phone       Phone?
  email       Email?
  pet         Pet     @relation(fields: [petId], references: [id], onDelete: Cascade)
  petId       Int
}

model Pet {
  id      Int    @id @default(autoincrement())
  name    String
  tag     Tag    @relation(fields: [tagCode], references: [code], onDelete: Cascade)
  tagCode String @unique
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String
  parents Parent[]

  @@unique([name, ownerId])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  phone         String?
  address       Address?
  image         String?
  accounts      Account[]
  sessions      Session[]
  pets          Pet[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
